参考链接：https://github.com/gjmzj/kubeasz

一、ingress详解

1.规划介绍
K8s集群对外暴露服务的方式目前只有三种：loadblancer、nodeport、ingress。前两种熟悉起来比较快，而且使用起来也比较方便，在此就不进行介绍了。
下面详细讲解下ingress这个服务，ingress由两部分组成：ingress controller和ingress服务。
其中ingress controller目前主要有两种：基于nginx服务的ingress controller和基于traefik的ingress controller。
由于对nginx比较熟悉，而且需要使用TCP负载，所以在此我们选择的是基于nginx服务的ingress controller。

2.参考社区
k8s社区提供的ingress，github地址如下：https://github.com/kubernetes/ingress-nginx
nginx社区提供的ingress，github地址如下：https://github.com/nginxinc/kubernetes-ingress

二、ingress的工作原理

ingress contronler通过与k8s的api进行交互，动态的去感知k8s集群中ingress服务规则的变化，然后读取它，并按照定义的ingress规则，转发到k8s集群中对应的service。
而这个ingress规则写明了哪个域名对应k8s集群中的哪个service，然后再根据ingress-controller中的nginx配置模板，生成一段对应的nginx配置。
然后再把该配置动态的写到ingress-controller的pod里，该ingress-controller的pod里面运行着一个nginx服务，控制器会把生成的nginx配置写入到nginx的配置文件中，然后reload一下，使其配置生效。
以此来达到域名分配置及动态更新的效果。

三、实操
3.1 拉取应用镜像
docker pull httpd:alpine
docker pull tomcat:alpine
拉取nginx-controller镜像如下：docker pull quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0

3.2 创建namespace

1.#cat >yl-namespace.yaml << “EOF”
apiVersion: v1
kind: Namespace
metadata:
  name: yl-namespace
  labels:
    name: yl-namespace
 EOF
 
2.创建ns    
#kubectl apply -f yl-namespace.yml –record
namespace/yl-namespace created

3.查询创建的yl-namespace
#kubectl get ns
yl-namespace   Active 6s

3.3 创建service
1.#cat > yl-httpd-service.yml << “EOF”
apiVersion: v1
kind: Service
metadata:
  name: yl-httpd-svc
  namespace: yl-namespace
spec:
  type: NodePort
  ports:
  - name: http-port
    nodePort: 32080
    port: 80
    targetPort: 80
  selector:
    app: yl-httpd-dm

注：在yl-httpd-service.yml文件中，我们在yl-namespace这个ns中，定义一个名为yl-httpd-svc的Service，并且使用NodePort这个service类型，使用32080端口对外提供访问端口。
    同时这个yml文件中，我们也使用selector来选择后端的Deployment，在此我们选择的是yl-httpd-dm（对应后面的deploy名称）。

2. 创建service
#kubectl apply -f yl-service.yaml
service/yl-httpd-svc created

3.查询创建的service
yl-httpd-svc   NodePort   192.8.241.76   <none>        80:32080/TCP   13s
