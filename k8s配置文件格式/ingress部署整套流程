参考链接：https://github.com/gjmzj/kubeasz

一、ingress详解

1.规划介绍
K8s集群对外暴露服务的方式目前只有三种：loadblancer、nodeport、ingress。前两种熟悉起来比较快，而且使用起来也比较方便，在此就不进行介绍了。
下面详细讲解下ingress这个服务，ingress由两部分组成：ingress controller和ingress服务。
其中ingress controller目前主要有两种：基于nginx服务的ingress controller和基于traefik的ingress controller。
由于对nginx比较熟悉，而且需要使用TCP负载，所以在此我们选择的是基于nginx服务的ingress controller。

2.参考社区
k8s社区提供的ingress，github地址如下：https://github.com/kubernetes/ingress-nginx
nginx社区提供的ingress，github地址如下：https://github.com/nginxinc/kubernetes-ingress

二、ingress的工作原理

ingress contronler通过与k8s的api进行交互，动态的去感知k8s集群中ingress服务规则的变化，然后读取它，并按照定义的ingress规则，转发到k8s集群中对应的service。
而这个ingress规则写明了哪个域名对应k8s集群中的哪个service，然后再根据ingress-controller中的nginx配置模板，生成一段对应的nginx配置。
然后再把该配置动态的写到ingress-controller的pod里，该ingress-controller的pod里面运行着一个nginx服务，控制器会把生成的nginx配置写入到nginx的配置文件中，然后reload一下，使其配置生效。
以此来达到域名分配置及动态更新的效果。

三、实操
3.1 拉取应用镜像
docker pull httpd:alpine
docker pull tomcat:alpine
拉取nginx-controller镜像如下：docker pull quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0

3.2 创建namespace

3.2.1 #cat >yl-namespace.yaml << “EOF”
apiVersion: v1
kind: Namespace
metadata:
  name: yl-namespace
  labels:
    name: yl-namespace
 EOF
 
3.2.2 创建ns    
#kubectl apply -f yl-namespace.yml –record
namespace/yl-namespace created

3.2.3 查询创建的yl-namespace
#kubectl get ns
yl-namespace   Active 6s

3.3 创建service

3.3.1 #cat > yl-httpd-service.yml << “EOF”
apiVersion: v1
kind: Service
metadata:
  name: yl-httpd-svc
  namespace: yl-namespace
spec:
  type: NodePort
  ports:
  - name: http-port
    nodePort: 32080
    port: 80
    targetPort: 80
  selector:
    app: yl-httpd-dm

注：在yl-httpd-service.yml文件中，我们在yl-namespace这个ns中，定义一个名为yl-httpd-svc的Service，并且使用NodePort这个service类型，使用32080端口对外提供访问端口。
    同时这个yml文件中，我们也使用selector来选择后端的Deployment，在此我们选择的是yl-httpd-dm（对应后面的deploy名称）。

3.3.2 创建service
#kubectl apply -f yl-service.yaml
service/yl-httpd-svc created

3.3.3 查询创建的service
kubectl get service -n yl-namespace
yl-httpd-svc   NodePort   192.8.241.76   <none>        80:32080/TCP   13s
注：service分配的ip为192.8.241.76，此ip为k8s集群内部地址，外部是无法访问的。

3.4 创建deployment

3.4.1cat > yl-httpd-deployment.yml << “EOF”
apiVersion: apps/v1
kind: Deployment
metadata:
  name: yl-httpd
  namespace: yl-namespace
spec:
  replicas: 2
  selector:
    matchLabels:
     app: yl-httpd-dm
  revisionHistoryLimit: 5
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: yl-httpd-dm
    spec:
      terminationGracePeriodSeconds: 60
      restartPolicy: Always
      containers:
      - name: yl-httpd
        image: httpd:alpine
        imagePullPolicy: Always

注：在yl-httpd-deployment.yml这个文件中，我们在yl-namespace中，定义一个名为yl-httpd的Deployment，并且定义了一个yl-httpd-dm的labels。
   这样yl-httpd-svc这个Service就和yl-httpd这个Deployment关联起来了。
   同时在这个yml文件中，我们也定义了该pod的发布策略RollingUpdate滚动发布，以及副本集个数replicas: 2。
 
3.4.2 创建deploy
# kubectl apply -f yl-deploy.yaml
deployment.apps/yl-httpd created

3.4.3 查询创建的deploy
#kubectl get deploy -n yl-namespace -owide
NAME       READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTOR
yl-httpd   2/2     2            2           11m   yl-httpd     httpd:alpine   app=yl-httpd-dm
查询对用的pod
# kubectl get pod -n yl-namespace -owide
NAME                        READY   STATUS    RESTARTS   AGE   IP              NODE    NOMINATED NODE   READINESS GATES
yl-httpd-5cb84fb46f-lt7kc   1/1     Running   0          11m   192.17.211.22   node4   <none>           <none>
yl-httpd-5cb84fb46f-vxbn6   1/1     Running   0          11m   192.26.28.5     node3   <none>           <none>

注：这里我们看到有两个yl-httpd pod运行在node4和node3节点，而且pod里面的IP地址也分别是192.17.211.22和192.26.28.5
这里面需要注意下每个pod所被分配的IP地址，是根据该pod所在node节点响应的网卡的IP地址段来分配的。

3.4.4 到node节点查看对外暴露的32080端口
#ssh node3
#netstat -tunlp|grep 32080
tcp        0      0 0.0.0.0:32080           0.0.0.0:*               LISTEN      11000/kube-proxy
注：我们可以很明显的看出node节点已经监听了我们在yl-httpd-service.yml文件中配置的yl-httpd-svc的NodePort对外的映射端口32080。

3.4.5 访问httpd服务
http://node3:32080
显示It works!

注：我们可以很明显的看出，yl-httpd-svc这个service已经正常对外提供服务，说明我们以上的操作都是正常的。

四、ingress配置实操
注意：service、deployment、ingress是区分namespace的。
ingress可以自动感知后端应用，这里就不需要查看httpd服务是在那个节点运行了。

1.安装配置ingress-controller
下载https://github.com/kubernetes/ingress-nginx/tree/master/deploy/static/provider/aws/deploy.yaml,并拷贝到yl-nginx-ingress-controllor.yaml中

2.修改参数
2.1启用hostNetwork网络
hostNetwork网络，这是一种直接定义Pod网络的方式。
如果在Pod中使用hostNetwork:true配置网络，那么Pod中运行的应用程序可以直接使用node节点的端口，这样node节点主机所在网络的其他主机，都可以通过该端口访问到此应用程序。

在yl-nginx-ingress-controllor.yaml文件中添加hostNetwork: true即可
.......
  app.kubernetes.io/component: controller
---
# Source: ingress-nginx/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.23.0
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/version: 0.44.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: ingress-nginx-controller
  namespace: ingress-nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/component: controller
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/component: controller
    spec:
      hostNetwork: true                      
      nodeSelector:
        nginx: "nginx"
      dnsPolicy: ClusterFirst
      containers:
......
下面是ingress-controller监听端口，80,443
    failureThreshold: 3
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: webhook
              containerPort: 8443
              protocol: TCP
注：nginx-ingress-controller默认负载的是http协议。

2.2 service建议改为 type: NodePort形式
......
spec:
  type: NodePort
  externalTrafficPolicy: Local
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/name: ingress-nginx
.....    
    
2.3 指定node节点配置ingress-controller（也可以不配置）
nginx-ingress-controller会随意选择一个node节点运行pod，为此需要我们把nginx-ingress-controller运行到指定的node节点上。
首先需要给需要运行nginx-ingress-controller的node节点打标签，在此我们把nginx-ingress-controller运行在node1这个node节点上。
# kubectl label node node1 nginx=nignx
node/node1 labeled

# kubectl get nodes --show-labels
NAME      STATUS   ROLES    AGE    VERSION   LABELS
master2   Ready    master   114d   v1.18.5   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=master2,kubernetes.io/os=linux,node-role.kubernetes.io/master=
node1     Ready    <none>   114d   v1.18.5   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=node1,kubernetes.io/os=linux,nginx=nignx
node2     Ready    <none>   114d   v1.18.5   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=node2,kubernetes.io/os=linux

添加指定的node节点(上面已经添加)
      nodeSelector:
        nginx: "nginx"
2.4 创建nginx-ingress-controllor
#kubectl apply -f yl-nginx-ingress-controllor.yaml
#kubectl get pod -n ingress-nginx  -owide
NAME                                        READY   STATUS      RESTARTS   AGE   IP              NODE    NOMINATED NODE   READINESS GATES
ingress-nginx-admission-create-s8mkd        0/1     Completed   0          85m   192.26.28.6     node3   <none>           <none>
ingress-nginx-admission-patch-qfnls         0/1     Completed   0          74m   192.27.71.15    node1   <none>           <none>
ingress-nginx-controller-797f546b79-grjk5   1/1     Running   0          53s   10.116.253.27   node1   <none>           <none>

2.5查询nginx配置
kubectl exec -it -n ingress-nginx ingress-nginx-controller-797f546b79-grjk5 bash
#ps -ef
#cat /etc/nginx/nginx.conf

3.创建httpd的ingress.yaml
3.1 httpd（无子目录）
cat > yl-httpd-deployment.yml << “EOF”
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: yl-ingress
  namespace: yl-namespace
spec:
  rules:
  - host: yl.ingress.com.huawei.com
    http:
      paths:
      - backend:
          serviceName: yl-httpd-svc
          servicePort: 80
EOF

# kubectl apply -f yl-ingresst.yaml
ingress.extensions/yl-ingress created

# kubectl get ingress yl-ingress -n yl-namespace  -owide
NAME         CLASS    HOSTS                       ADDRESS        PORTS   AGE
yl-ingress   <none>   yl.ingress.com.huawei.com   192.0.65.117   80      46m

注：我们定义yl.ingress.com.huawei.com这个域名，根目录/访问的是yl-httpd-svc这个service的80端口，注意该端口也是yl-httpd-svc后端pod的容器端口。

访问url：http://yl.ingress.com.huawei.com（通过）

3.2 存在tomcat子目录
------:如果有子目录可以添加子目录如下:

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: yl-ingress-tomcat
  namespace: yl-namespace
spec:
  rules:
  - host: yl.ingress.tomcat.com.huawei.com
    http:
      paths:
      - backend:
          serviceName: yl-tomcat-svc
          servicePort: 8080
        path: /tomcat

注：子目录tomcat访问的是ilanni-tomcat-svc这个service的8080端口，注意该端口也是yl-tomcat-svc后端pod的容器端口

# kubectl apply -f yl-ingress-tomcat.yaml
ingress.extensions/yl-ingress-tomcat created

#kubectl get ingress -n yl-namespace  -owide
NAME                CLASS    HOSTS                          ADDRESS        PORTS   AGE
yl-ingress          <none>   yl.ingress.com.huawei.com      192.0.65.117   80      41m
yl-ingress-tomcat   <none>   yl.ingress.tomcat.huawei.com   192.0.65.117   80      2m19s

访问url：http://yl.ingress.com.huawei.com/tomcat（通过）


注：公司内网是windows系统，需要配置windows系统的hosts文件，通常在C:\Windows\System32\drivers\etc路径下，（10.116.253.27为nginx-ingress-controller暴露80和443的对外端口机器）
10.116.253.27 yl.ingress.com.huawei.com
10.116.253.27 yl.ingress.tomcat.huawei.com
