http协议：127.0.0.1:8080
跨网络tlls、tssl通信：10.4.7.21:6443-》挂载都vip10.4.7.10的7443上（L4反代）
主控节点：apisrever、controller-manager、scheduler绑定在一起
etcd自行部署，奇数个，高可用机制
主控节点：kubelet、kube-proxy

iptables规则，
各种命令：
~]#cfssl-certinfo -cert apiserver.pem
把apiserver.pem还原成Jason格式：列出证书信息
~]#cfssl-certinfo -domain www.baidu.com
列出baidu的证书信息

证书签发日期和有效期
"not_before": "2020-06-13T11:40:00Z",
"not_after": "2040-06-08T11:40:00Z",

签发证书时，ca证书时不能变的

kubectl陈述式管理（增删改查）
声明式:依赖于统一资源配置清单

查看名称空间
~]# kubectl get namespace
~]# kubectl get ns

列出某个名称空间的所有资源
~]# kubectl get all [-n default]
~]# kubectl get all -n default

创建名称空间
~]# kubectl create ns app
~]# kubectl delete namespace app

pod资源：
NAME                 READY   STATUS    RESTARTS   AGE
pod/nginx-ds-47ltm   1/1     Running   2          16d
pod/nginx-ds-qqmkh   1/1     Running   1          23d
service资源：
NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE
service/kubernetes   ClusterIP   192.168.0.1      <none>        443/TCP   30d
service/nginx-ds     ClusterIP   192.168.24.238   <none>        801/TCP   25d
pod控制器：
NAME                      DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE
daemonset.apps/nginx-ds   1         1         1       1            1           <none>          27d

创建deploymentpod控制器（通过image顺便将pod创建）
~]# kubectl create deployment nginx-dp --image=harbor.od.com/public/nginx:v1.7.9 -n kube-public （daemonset不能用陈述式命令创建）
~]# kubectl get deploy -n kube-public
~]# kubectl get deployment -o wide -n kube-public
详细查看
~]# kubectl describe deployment nginx-dp -n kube-public
Name:                   nginx-xx                      （pod控制器名称）
Namespace:              kube-public                    （所在的ns）
CreationTimestamp:      Fri, 29 May 2020 22:17:40 +0800
Labels:                 app=nginx-xx                    （默认labels）
Annotations:            deployment.kubernetes.io/revision: 1  （控制的容器是第一版）
Selector:               app=nginx-xx                           （标签选择器）
Replicas:               3 desired | 3 updated | 3 total | 0 available | 3 unavailable （期望3个，3个正着运行）
StrategyType:           RollingUpdate                   （跟新策略，滚动发布）

~]# kubectl get pods -n kube-public
~]# kubectl exec -ti nginx-dp-5dfc689474-x5nhb /bin/bash -n kube-public
kubectl exec -ti nginx-dp-5dfc689474-x5nhb /bin/bash -n kube-public -- ps -ef|grep 8080
~]# kubectl delete pod nginx-dp-5dfc689474-gtfvv -n kube-public [--force --grace-period=0]
~]# kubectl delete deploy nginx-dp -n kube-public（删除pod控制器）

k8s四大核心资源：deployment、pod、service、ingress

service为pod提供稳定的接入点（endpoint）（cluster-ip），防止pod漂移，即无论pod-ip如何变幻，cluster-ip不变
指定暴露端口形式创建service
~]# kubectl expose deployment nginx-dp --port=80 -n kube-public

NAME               TYPE        CLUSTER-IP        EXTERNAL-IP   PORT(S)    AGE
service/nginx-dp   ClusterIP   192.168.171.22    <none>        8080/TCP   3s

[root@hdss7-21 ~]# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -> RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  192.168.0.1:443 nq
  -> 192.168.190.165:6443         Masq    1      0          0         
  -> 192.168.190.166:6443         Masq    1      0          0                 
TCP  192.168.171.22:8080 nq
  -> 172.7.21.5:8080              Masq    1      0          0         
  -> 172.7.22.3:8080              Masq    1      0          0         
 
[root@hdss7-21 ~]# kubectl describe svc nginx -n kube-public
Name:              nginx-dp
Namespace:         kube-public
Labels:            app=nginx-dp                          （通过标签）
Annotations:       <none>
Selector:          app=nginx-dp     （通过标签选择机制，只要label是nginx-dp并且在kube-public内的pod
                                      都用同一个service和clusterip）
Type:              ClusterIP
IP:                192.168.171.22      （集群ip，虚拟ip，只在k8s自己的运算集群内使用）
Port:              <unset>  8080/TCP
TargetPort:        8080/TCP
Endpoints:         172.7.21.5:8080,172.7.22.3:8080
Session Affinity:  None
Events:            <none>

Name:              nginx-x
Namespace:         kube-public
Labels:            app=nginx-x
Annotations:       <none>
Selector:          app=nginx-x
Type:              ClusterIP
IP:                192.168.39.93
Port:              <unset>  8080/TCP
TargetPort:        80/TCP
Endpoints:         <none>
Session Affinity:  None
Events:            <none>

Name:              nginx-xx
Namespace:         kube-public
Labels:            app=nginx-xx
Annotations:       <none>
Selector:          app=nginx-xx
Type:              ClusterIP
IP:                192.168.201.194
Port:              <unset>  80/TCP
TargetPort:        80/TCP

扩容，将pod增加至两个
~]# kubectl scale deployment nginx-dp --replicas=2 -n kube-public

~]# kubectl describe svc nginx-dp -n kube-public


k8s的中文社区网址
http://docs.kubernetes.org.cn

service通过特色管理功能labels、selector，如：
labels：app=nginx-dp
selector：app=nginx-dp
内部集群ip
type：clusterip
ip：192.168.23.11

获取、查看资源配置清单
kubectl get pods pod名称 -o yaml -n kube-system
kubectl get svc svc名称 -o yaml -n kube-system

解释资源配置清单里metade的含义（yaml学习重要命令）
kubectl expain service.metadte

获取同一资源配置清单
~]# kubectl get svc nginx-dp -oyaml -n kube-public

apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-dp
  name: nginx-dp
  namespace: kube-public 
spec:
  clusterIP: 192.168.171.22
  ports:
  - port: 8080             
    protocol: TCP
    targetPort: 8080     （把docker内的8080端口映射成宿主机的8080端口）
  selector:
    app: nginx-dp
  type: ClusterIP


~]# kubectl get pods nginx-dp-5dfc689474-f2bvt -o yaml -n kube-public

apiVersion: v1
kind: Pod
metadata:
  generateName: nginx-dm-55cdbb5775-
  labels:
    app: nginx-dm
  name: nginx-dm-55cdbb5775-q8thv
  namespace: kube-public
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: ReplicaSet
    name: nginx-dm-55cdbb5775
  resourceVersion: "256612"
  selfLink: /api/v1/namespaces/kube-public/pods/nginx-dm-55cdbb5775-q8thv
  uid: 3fa3a2b7-2b11-4c25-a1e8-ed2da925b45f
spec:
  containers:
  - image: harbor.od.com/public/nginx:v1.7.9
    imagePullPolicy: IfNotPresent
    name: nginx
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-dk98x
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: hdss7-21.host.com
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: default-token-dk98x
    secret:
      defaultMode: 420
      secretName: default-token-dk98x

~]# kubectl explain service.metadata

vi nginx-ds-svc.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-ds
  name: nginx-ds        #名称
  namespace: default
spec:
  ports:
  - port: 80          #暴露端口
    protocol: TCP     #暴露的协议
    targetPort: 80
  selector:           #关联deamonset的pod控制器nginx-ds的pod
    app: nginx-ds
  sessionAffinity: None
  type: ClusterIP
  
~]# kubectl create -f nginx-ds-svc.yaml 

离线修改
~]# kubectl delete svc nginx-ds        （陈述式）
~]# kubectl delete -f nginx-dp-svc.yaml（声明式）
kubectl apply -f  svc nginx-dp-svc.yaml

在线修改（没有记录）
kubectl edit svc nginx-ds


hdss7-21\22

flannel源码包下载地址（管理pod网络）
https://github.com/coreos/flannel/releases（github源）

src]# wget https://github.com/coreos/flannel/releases/download/v0.11.0/flannel-v0.11.0-linux-amd64.tar.gz

src]# mkdir /opt/flannel-v0.11.0

src]# tar xf flannel-v0.11.0-linux-amd64.tar.gz -C /opt/flannel-v0.11.0/

src]# ln -s /opt/flannel-v0.11.0/ /opt/flannel

flannel]# mkdir cert

cert]# scp hdss7-200:/opt/certs/ca.pem . 

cert]# scp hdss7-200:/opt/certs/client.pem .

cert]# scp hdss7-200:/opt/certs/client-key.pem .

flannel]# vi subnet.env

FLANNEL_NETWORK=172.7.0.0/16  （定义pod网络）
FLANNEL_SUBNET=172.7.21.1/24   （定义子网）
FLANNEL_MTU=1500
FLANNEL_IPMASQ=false

flannel]# vi flanneld.sh 


#!/bin/sh
./flanneld \
  --public-ip=10.4.7.21 \                                                                 （本身的暴露节点）
  --etcd-endpoints=https://10.4.7.12:2379,https://10.4.7.21:2379,https://10.4.7.22:2379 \  （etcd接入点）
  --etcd-keyfile=./cert/client-key.pem \
  --etcd-certfile=./cert/client.pem \
  --etcd-cafile=./cert/ca.pem \
  --iface=eth0 \
  --subnet-file=./subnet.env \
  --healthz-port=2401

chmod +x flanneld.sh

mkdir -p /data/logs/flanneld

etcd]# ./etcdctl set /coreos.com/network/config '{"Network": "172.7.0.0/16", "Backend": {"Type": "host-gw"}}'
 (在一台机器上执行就可以，flannel以来于etcd执行网络信息)

./etcdctl  mumber list     （查看etcd节点情况）

~]# vi /etc/supervisord.d/flannel.ini


[program:flanneld-7-21]
command=/opt/flannel/flanneld.sh                             ; the program (relative uses PATH, can take args)
numprocs=1                                                   ; number of processes copies to start (def 1)
directory=/opt/flannel                                       ; directory to cwd to before exec (def no cwd)
autostart=true                                               ; start at supervisord start (default: true)
autorestart=true                                             ; retstart at unexpected quit (default: true)
startsecs=30                                                 ; number of secs prog must stay running (def. 1)
startretries=3                                               ; max # of serial start failures (default 3)
exitcodes=0,2                                                ; 'expected' exit codes for process (default 0,2)
stopsignal=QUIT                                              ; signal used to kill process (default TERM)
stopwaitsecs=10                                              ; max num secs to wait b4 SIGKILL (default 10)
user=root                                                    ; setuid to this UNIX account to run the program
redirect_stderr=true                                         ; redirect proc stderr to stdout (default false)
stdout_logfile=/data/logs/flanneld/flanneld.stdout.log       ; stderr log path, NONE for none; default AUTO
stdout_logfile_maxbytes=64MB                                 ; max # logfile bytes b4 rotation (default 50MB)
stdout_logfile_backups=4                                     ; # of stdout logfile backups (default 10)
stdout_capture_maxbytes=1MB                                  ; number of bytes in 'capturemode' (default 0)
stdout_events_enabled=false                                  ; emit events on stdout writes (default false)

supervisorctl status
若出现问题，到另一台机器上关闭所有服务，在将本台机器上所有服务启动一下（具体不详，应该是存在启动顺序）
supervisorctl stop all
supervisorctl start  all
supervisorctl start flanneld-7-21

route -n（7-22）（22想访问21，要通过10.4.7.21进行访问）
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         10.4.7.1        0.0.0.0         UG    100    0        0 eth0
10.4.7.0        0.0.0.0         255.255.255.0   U     100    0        0 eth0
172.7.21.0      10.4.7.21       255.255.255.0   UG    0      0        0 eth0
172.7.22.0      0.0.0.0         255.255.255.0   U     0      0        0 docker0
route -n（7-21）
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         10.4.7.1        0.0.0.0         UG    100    0        0 eth0
10.4.7.0        0.0.0.0         255.255.255.0   U     100    0        0 eth0
172.7.21.0      0.0.0.0         255.255.255.0   U     0      0        0 docker0
172.7.22.0      10.4.7.22       255.255.255.0   UG    0      0        0 eth0
凡是172.7.22.0网络网关是10.4.7.22（相当于添加了静态路由，两个静态路由指向同一个网关10.4.7.1）

下面自行做实验
./etcdctl rm   /coreos.com/network/config 
./etcdctl get  /coreos.com/network/config 

route del -net 172.7.22.0/24 gw 10.4.7.22

./etcdctl set /coreos.com/network/config '{"Network": "172.7.0.0/16", "Backend": {"Type": "VxLAN"}}'

./etcdctl set /coreos.com/network/config '{"Network": "172.7.0.0/16", "Backend": {"Type": "VxLAN","Directrouting": true}}'（兼容VxLAN和host-gw）

修改snat转换

~]# yum install iptables-services -y
iptables-save |grep -i postrouting

~]# iptables -t nat -D POSTROUTING -s 172.7.21.0/24 ! -o docker0 -j MASQUERADE  （删）
~]# iptables -t nat -I POSTROUTING -s 172.7.21.0/24 ! -d 172.7.0.0/16 ! -o docker0 -j MASQUERADE  
（优化，原地址是172.7.21.0/24，目标地址不是172.7.0.0/16网段，并且网络发包不是从docker0出网的，才做snat转换）


~]# iptables-save |grep -i postrouting    
~]# iptables-save > /etc/sysconfig/iptables             （保存规则）
~]# iptables -t fileter -D INPUT/FORWARD -j REJECT --reject-with icmp-host-prohibited

kubectl logs -f pod名称（持续跟进）


hdss7-200

内网清单的http服务（用于存放各种文件）
/etc/nginx/conf.d/k8s-yaml.od.com.conf

server {
    listen       80;
    server_name  k8s-yaml.od.com;

    location / {
        autoindex on;
        default_type text/plain;
        root /data/k8s-yaml;
    }
}

vim /var/named/od.com.zone
k8s-yaml           A    10.4.7.200

systemctl restart named
dig -t A k8s-yaml.od.com @10.4.7.11 +short
访问k8s-yaml.od.com


配置coredns服务发现

hdss7-200
~]# docker pull coredns/coredns:1.6.1
coredns]# docker tag c0f6e815079e harbor.od.com/public/coredns:v1.6.1

官方文件：https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/dns/coredns/coredns.yaml.base

准备资源配置清单
cd /data/k8s-yaml/coredns
rbac.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: coredns
  namespace: kube-system
  labels:
      kubernetes.io/cluster-service: "true"
      addonmanager.kubernetes.io/mode: Reconcile
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    addonmanager.kubernetes.io/mode: Reconcile
  name: system:coredns
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  - pods
  - namespaces
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    addonmanager.kubernetes.io/mode: EnsureExists
  name: system:coredns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:coredns
subjects:
- kind: ServiceAccount
  name: coredns
  namespace: kube-system
  
cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
data:
  Corefile: |
    .:53 {
        errors
        log
        health
        ready
        kubernetes cluster.local 192.168.0.0/16  （自建dns）
        forward . 10.4.7.11                    （即指向上级dns）
        cache 30
        loop
        reload
        loadbalance
       }

dp.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns
  namespace: kube-system
  labels:
    k8s-app: coredns
    kubernetes.io/name: "CoreDNS"
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: coredns
  template:
    metadata:
      labels:
        k8s-app: coredns
    spec:
      priorityClassName: system-cluster-critical
      serviceAccountName: coredns
      containers:
      - name: coredns
        image: harbor.od.com/public/coredns:v1.6.1
        args:
        - -conf
        - /etc/coredns/Corefile
        volumeMounts:
        - name: config-volume
          mountPath: /etc/coredns
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        - containerPort: 9153
          name: metrics
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
      dnsPolicy: Default
      volumes:
        - name: config-volume
          configMap:
            name: coredns
            items:
            - key: Corefile
              path: Corefile
			  
svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: coredns
  namespace: kube-system
  labels:
    k8s-app: coredns
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
spec:
  selector:
    k8s-app: coredns
  clusterIP: 192.168.0.2
  ports:
  - name: dns
    port: 53
    protocol: UDP
  - name: dns-tcp
    port: 53
  - name: metrics
    port: 9153
    protocol: TCP
	
~]# kubectl apply -f http://k8s-yaml.od.com/coredns/rbac.yaml
~]# kubectl apply -f http://k8s-yaml.od.com/coredns/cm.yaml
~]# kubectl apply -f http://k8s-yaml.od.com/coredns/dp.yaml
~]# kubectl apply -f http://k8s-yaml.od.com/coredns/svc.yaml

~]# dig -t A nginx-dp.kube-public.svc.cluster.local. @192.168.0.2 +short   （192.168.0.2自建dns）

coredns详细解析
http://ccnuo.com/2019/08/25/CoreDNS%EF%BC%9AKubernetes%E5%86%85%E9%83%A8%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E5%8E%9F%E7%90%86%E3%80%81%E5%BC%8A%E7%AB%AF%E5%8F%8A%E4%BC%98%E5%8C%96%E6%96%B9%E5%BC%8F/

部署traefik（ingress控制器的实现软件）
hdss7-200
https://github.com/containous/traefik
（路径containous、traaefik、tree、1.7、example、k8s）

~]# docker pull traefik:v1.7.2-alpine

vim rbac.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik-ingress-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: traefik-ingress-controller
rules:
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-ingress-controller
subjects:
- kind: ServiceAccount
  name: traefik-ingress-controller          （实现ingress功能的一个组件）
  namespace: kube-system

vim ds.yaml

apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: traefik-ingress
  namespace: kube-system
  labels:
    k8s-app: traefik-ingress
spec:
  template:
    metadata:
      labels:
        k8s-app: traefik-ingress         （service通过次标签找到pod）
        name: traefik-ingress
    spec:
      serviceAccountName: traefik-ingress-controller
      terminationGracePeriodSeconds: 60
      containers:
      - image: harbor.od.com/public/traefik:v1.7.2
        name: traefik-ingress
        ports:
        - name: controller    （实现ingress功能的一个组件ingress-conroller）
          containerPort: 80            （把ingress的80映射到宿主机的81端口）
          hostPort: 81
        - name: admin-web             （traefik的管理页面）
          containerPort: 8080
        securityContext:
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        args:
        - --api
        - --kubernetes
        - --logLevel=INFO
        - --insecureskipverify=true
        - --kubernetes.endpoint=https://10.4.7.10:7443       （vip）
        - --accesslog
        - --accesslog.filepath=/var/log/traefik_access.log
        - --traefiklog
        - --traefiklog.filepath=/var/log/traefik.log
        - --metrics.prometheus
		
vim svc.yaml                      （service是通过kube-proxy组件实现网络承载的）

kind: Service
apiVersion: v1
metadata:
  name: traefik-ingress-service
  namespace: kube-system
spec:
  selector:                            （service通过selector找到对应的pod）
    k8s-app: traefik-ingress
  ports:
    - protocol: TCP
      port: 80
      name: controller
    - protocol: TCP
      port: 8080
      name: admin-web
	  
vim ingress.yaml

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: traefik-web-ui
  namespace: kube-system
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
  - host: traefik.od.com                        （traeffik的域名，相当于nginx的servername）
    http:
      paths:
      - path: /                                 （一个列表，相当于localhost）
        backend:
          serviceName: traefik-ingress-service  （对应service的traefik-ingress-service，相当于procpass）
          servicePort: 8080
		  
kubectl apply -f http://k8s-yaml.od.com/traefik/rbac.yaml
kubectl apply -f http://k8s-yaml.od.com/traefik/ds.yaml
kubectl apply -f http://k8s-yaml.od.com/traefik/svc.yaml
kubectl apply -f http://k8s-yaml.od.com/traefik/ingress.yaml


注：error: error converting YAML to JSON: yaml: line 15: did not find expected key
这个问题，的报错出现在文件编写上面提示15行所以需要自己在14 15 16 行查看编写以及空格的问题
kubectl get pods -n kube-system

7-11/12
vim /etc/nginx/conf.d/od.com.conf
upstream default_backend_traefik {
    server 10.4.7.21:81    max_fails=3 fail_timeout=10s;
    server 10.4.7.22:81    max_fails=3 fail_timeout=10s;
}
server {
    server_name *.od.com;               （泛域名匹配，将所有的x.od.com全部丢到ingress资源配置里去）
  
    location / {
        proxy_pass http://default_backend_traefik;
        proxy_set_header Host       $http_host;
        proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;
    }
}


添加  traefik   A   10.4.7.11
https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/dashboard/dashboard-rbac.yaml

~]# docker pull k8scn/kubernetes-dashboard-amd64:v1.8.3

7-21
rbac.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: kubernetes-dashboard
    addonmanager.kubernetes.io/mode: Reconcile
  name: kubernetes-dashboard-admin
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubernetes-dashboard-admin
  namespace: kube-system
  labels:
    k8s-app: kubernetes-dashboard
    addonmanager.kubernetes.io/mode: Reconcile
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: kubernetes-dashboard-admin
  namespace: kube-system
  
dp.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubernetes-dashboard
  namespace: kube-system
  labels:
    k8s-app: kubernetes-dashboard
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  selector:
    matchLabels:
      k8s-app: kubernetes-dashboard
  template:
    metadata:
      labels:
        k8s-app: kubernetes-dashboard
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      priorityClassName: system-cluster-critical
      containers:
      - name: kubernetes-dashboard
        image: harbor.od.com/public/dashboard:v1.8.3
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 50m
            memory: 100Mi
        ports:
        - containerPort: 8443
          protocol: TCP
        args:
          # PLATFORM-SPECIFIC ARGS HERE
          - --auto-generate-certificates
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /
            port: 8443
          initialDelaySeconds: 30
          timeoutSeconds: 30
      volumes:
      - name: tmp-volume
        emptyDir: {}
      serviceAccountName: kubernetes-dashboard-admin
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
		
svc.yaml


apiVersion: v1
kind: Service
metadata:
  name: kubernetes-dashboard
  namespace: kube-system
  labels:
    k8s-app: kubernetes-dashboard
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  selector:
    k8s-app: kubernetes-dashboard
  ports:
  - port: 443
    targetPort: 8443
	
	
ingress.yaml


apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: kubernetes-dashboard
  namespace: kube-system
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
  - host: dashboard.od.com
    http:
      paths:
      - backend:
          serviceName: kubernetes-dashboard
          servicePort: 443

vim /var/named/od.com.zone
$TTL 60 ; 1 minute
dns                A    10.4.7.11
harbor             A    10.4.7.200
k8s-yaml           A    10.4.7.200
traefik            A    10.4.7.10
dashboard          A    10.4.7.10

hdss7-200
certs]# (umask 077; openssl genrsa -out dashboard.od.com.key 2048)
certs]# openssl req -new -key dashboard.od.com.key -out dashboard.od.com.csr -subj "/CN=dashboard.od.com/C=CN/ST=BJ/L=Beijing/O=OldboyEdu/OU=ops"
certs]# openssl x509 -req -in dashboard.od.com.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out dashboard.od.com.crt -days 3650

7-11
mkdir/cd  /etc/nginx/certs/
scp hdss7-200:/opt/certs/dashboard.od.com.csr .
scp hdss7-200:/opt/certs/dashboard.od.com.key .

conf.d]# vim dashboard.od.com.conf 
server {
    listen       80;
    server_name  dashboard.od.com;

    rewrite ^(.*)$ https://${server_name}$1 permanent;
}
server {
    listen       443 ssl;
    server_name  dashboard.od.com;

    ssl_certificate "certs/dashboard.od.com.crt";
    ssl_certificate_key "certs/dashboard.od.com.key";
    ssl_session_cache shared:SSL:1m;
    ssl_session_timeout  10m;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    location / {
        proxy_pass http://default_backend_traefik;
        proxy_set_header Host       $http_host;
        proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;
    }
}

kubectl get  secret -n kube-system
conf]# kubectl describe secret kubernetes-dashboard-admin-token-fm4hf -n kube-system

eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZC1hZG1pbi10b2tlbi1xa2RjZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZC1hZG1pbiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjMxYWNlNDJkLTU2YWUtNDM1Yy1iYzhlLWYyMTgzMDQyNmZjYiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlLXN5c3RlbTprdWJlcm5ldGVzLWRhc2hib2FyZC1hZG1pbiJ9.kEIvh1uAzNdkYK12ro-HgWaK3YoElFmlULUDpIGvKJb1DQl5u9kED_Ii5w4WwuRIcTVYdfp9gGPXpUfDyLiutkUaLCh-9dvaVaANbm5qeWNyvJkAllhMw8FWjXn2p_wulndbJlpY-Tgg2uYQPzfhMftuCUek0ECyeVEozw9CMABSPq6u3XPlPZUkRoq8TUA-NIFOY0fD490B2hYWWeeMijMh5kGULa84GPTm_LsSBwdOX45I2QwlwOXfcVq6OPBFZdk37ISKEcD7qx9xFn-vKEiskwiN80HHXuX7C0ZTIzo6R9Er8HaSWTHgMk9AbKO26tTZobhw0RURwRUOaj7LKA

dashboard]# cat rbac-minimal.yaml 
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: kubernetes-dashboard
    addonmanager.kubernetes.io/mode: Reconcile
  name: kubernetes-dashboard
  namespace: kube-system
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
    addonmanager.kubernetes.io/mode: Reconcile
  name: kubernetes-dashboard-minimal
  namespace: kube-system
rules:
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs"]
  verbs: ["get", "update", "delete"]
  # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["kubernetes-dashboard-settings"]
  verbs: ["get", "update"]
  # Allow Dashboard to get metrics from heapster.
- apiGroups: [""]
  resources: ["services"]
  resourceNames: ["heapster"]
  verbs: ["proxy"]
- apiGroups: [""]
  resources: ["services/proxy"]
  resourceNames: ["heapster", "http:heapster:", "https:heapster:"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubernetes-dashboard-minimal
  namespace: kube-system
  labels:
    k8s-app: kubernetes-dashboard
    addonmanager.kubernetes.io/mode: Reconcile
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubernetes-dashboard-minimal
subjects:
- kind: ServiceAccount
  name: kubernetes-dashboard
  namespace: kube-system

mkdir  /data/k8s-yaml/dashboard/heapster
heapster]# vi rbac.yaml


apiVersion: v1
kind: ServiceAccount
metadata:
  name: heapster
  namespace: kube-system
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: heapster
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:heapster
subjects:
- kind: ServiceAccount
  name: heapster
  namespace: kube-system


heapster]# vi dp.yaml


apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: heapster
  namespace: kube-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        task: monitoring
        k8s-app: heapster
    spec:
      serviceAccountName: heapster
      containers:
      - name: heapster
        image: harbor.od.com/public/heapster:v1.5.4
        imagePullPolicy: IfNotPresent
        command:
        - /opt/bitnami/heapster/bin/heapster
        - --source=kubernetes:https://kubernetes.default
		
heapster]# vi svc.yaml


apiVersion: v1
kind: Service
metadata:
  labels:
    task: monitoring
    # For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)
    # If you are NOT using this as an addon, you should comment out this line.
    kubernetes.io/cluster-service: 'true'
    kubernetes.io/name: Heapster
  name: heapster
  namespace: kube-system
spec:
  ports:
  - port: 80
    targetPort: 8082
  selector:
    k8s-app: heapster
	
